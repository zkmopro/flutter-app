// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

// Static analysis wrongly picks the IO variant, thus ignore this
// ignore_for_file: argument_type_not_assignable

import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_web.dart';
import 'third_party/test_e2e.dart';

abstract class RustLibApiImplPlatform extends BaseApiImpl<RustLibWire> {
  RustLibApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @protected
  Map<String, List<String>> dco_decode_Map_String_list_String_None(dynamic raw);

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  bool dco_decode_bool(dynamic raw);

  @protected
  CircomProofResult dco_decode_box_autoadd_circom_proof_result(dynamic raw);

  @protected
  CircomProof dco_decode_circom_proof(dynamic raw);

  @protected
  CircomProofResult dco_decode_circom_proof_result(dynamic raw);

  @protected
  G1 dco_decode_g_1(dynamic raw);

  @protected
  G2 dco_decode_g_2(dynamic raw);

  @protected
  Halo2ProofResult dco_decode_halo_2_proof_result(dynamic raw);

  @protected
  int dco_decode_i_32(dynamic raw);

  @protected
  List<String> dco_decode_list_String(dynamic raw);

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);

  @protected
  List<(String, List<String>)> dco_decode_list_record_string_list_string(
    dynamic raw,
  );

  @protected
  String? dco_decode_opt_String(dynamic raw);

  @protected
  ProofLib dco_decode_proof_lib(dynamic raw);

  @protected
  (String, List<String>) dco_decode_record_string_list_string(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  Map<String, List<String>> sse_decode_Map_String_list_String_None(
    SseDeserializer deserializer,
  );

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  CircomProofResult sse_decode_box_autoadd_circom_proof_result(
    SseDeserializer deserializer,
  );

  @protected
  CircomProof sse_decode_circom_proof(SseDeserializer deserializer);

  @protected
  CircomProofResult sse_decode_circom_proof_result(
    SseDeserializer deserializer,
  );

  @protected
  G1 sse_decode_g_1(SseDeserializer deserializer);

  @protected
  G2 sse_decode_g_2(SseDeserializer deserializer);

  @protected
  Halo2ProofResult sse_decode_halo_2_proof_result(SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer);

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  List<(String, List<String>)> sse_decode_list_record_string_list_string(
    SseDeserializer deserializer,
  );

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer);

  @protected
  ProofLib sse_decode_proof_lib(SseDeserializer deserializer);

  @protected
  (String, List<String>) sse_decode_record_string_list_string(
    SseDeserializer deserializer,
  );

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  void sse_encode_Map_String_list_String_None(
    Map<String, List<String>> self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_circom_proof_result(
    CircomProofResult self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_circom_proof(CircomProof self, SseSerializer serializer);

  @protected
  void sse_encode_circom_proof_result(
    CircomProofResult self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_g_1(G1 self, SseSerializer serializer);

  @protected
  void sse_encode_g_2(G2 self, SseSerializer serializer);

  @protected
  void sse_encode_halo_2_proof_result(
    Halo2ProofResult self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_loose(List<int> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_list_record_string_list_string(
    List<(String, List<String>)> self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer);

  @protected
  void sse_encode_proof_lib(ProofLib self, SseSerializer serializer);

  @protected
  void sse_encode_record_string_list_string(
    (String, List<String>) self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);
}

// Section: wire_class

class RustLibWire implements BaseWire {
  RustLibWire.fromExternalLibrary(ExternalLibrary lib);
}

@JS('wasm_bindgen')
external RustLibWasmModule get wasmModule;

@JS()
@anonymous
extension type RustLibWasmModule._(JSObject _) implements JSObject {}
